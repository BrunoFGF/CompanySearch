services:
  # SQL Server Database
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: company-search-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SA_PASSWORD}
    ports:
      - "1435:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P '${SA_PASSWORD}' -C -Q 'SELECT 1' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: company-search-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Database Initialization
  db-init:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: company-search-db-init
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SA_PASSWORD}
    depends_on:
      sqlserver:
        condition: service_healthy
    volumes:
      - ./database/init:/scripts
    command: >
      bash -c "
        echo 'Esperando SQL Server...';
        sleep 10;
        echo 'Ejecutando script de inicialización...';
        /opt/mssql-tools18/bin/sqlcmd -S sqlserver -U sa -P '${SA_PASSWORD}' -C -i /scripts/01-init.sql;
        echo 'Inicialización completada';
      "
    restart: "no"

  # .NET API
  api:
    build:
      context: ./CompanySearchBack
      dockerfile: CompanySearch.API/Dockerfile
    container_name: company-search-api
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT}
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=${SQL_CONNECTION_STRING}
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING}
    ports:
      - "${API_PORT}:8080"
    depends_on:
      sqlserver:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    restart: unless-stopped

volumes:
  sqlserver_data:
  redis_data: